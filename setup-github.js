#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è AI Task Processor\n");

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupGitHub() {
  try {
    console.log("üìã –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:");
    console.log("1. GitHub Personal Access Token");
    console.log("2. –ò–º—è –≤–∞—à–µ–≥–æ GitHub –∞–∫–∫–∞—É–Ω—Ç–∞");
    console.log("3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n");

    console.log("üîó –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å GitHub Token:");
    console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://github.com/settings/tokens");
    console.log('2. –ù–∞–∂–º–∏—Ç–µ "Generate new token (classic)"');
    console.log("3. –í—ã–±–µ—Ä–∏—Ç–µ scopes: repo, workflow");
    console.log("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω\n");

    const githubToken = await question(
      "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub Personal Access Token: "
    );
    let githubOwner = await question(
      "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub: "
    );
    const githubRepo = await question("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω...");
    const https = require("https");

    const checkToken = () => {
      return new Promise((resolve, reject) => {
        const req = https.request(
          {
            hostname: "api.github.com",
            path: "/user",
            method: "GET",
            headers: {
              Authorization: `token ${githubToken}`,
              "User-Agent": "AI-Task-Processor",
            },
          },
          (res) => {
            let data = "";
            res.on("data", (chunk) => (data += chunk));
            res.on("end", () => {
              if (res.statusCode === 200) {
                const user = JSON.parse(data);
                resolve(user.login);
              } else {
                reject(new Error(`Token check failed: ${res.statusCode}`));
              }
            });
          }
        );

        req.on("error", reject);
        req.end();
      });
    };

    try {
      const username = await checkToken();
      console.log(`‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: ${username}`);

      if (username !== githubOwner) {
        console.log(
          `‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${githubOwner}) –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–æ–∫–µ–Ω–∞ (${username})`
        );
        const useTokenUsername = await question(
          "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞? (y/n): "
        );
        if (useTokenUsername.toLowerCase() === "y") {
          githubOwner = username;
        }
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}`);
      console.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
      rl.close();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env.local
    const envContent = `# GigaChat API Configuration
GIGACHAT_AUTH_KEY=NjE2NDcyNDUtZTAzYy00NjhlLWFkM2MtOWY5YTk4MTQzMzY5OmM5MTAxOTM3LWJiOTItNGNmMS05Y2JjLWZiMjE1Nzc1NTQ1MQ==

# GitHub Configuration
GITHUB_TOKEN=${githubToken}
GITHUB_REPO_OWNER=${githubOwner}
GITHUB_REPO_NAME=${githubRepo}

# MCP Configuration
MCP_ENABLED=true
`;

    const envPath = path.join(__dirname, ".env.local");
    fs.writeFileSync(envPath, envContent);

    console.log("\n‚úÖ GitHub –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!");
    console.log(`üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${githubOwner}/${githubRepo}`);
    console.log(
      `üîë –¢–æ–∫–µ–Ω: ${githubToken.slice(0, 8)}...${githubToken.slice(-4)}`
    );

    console.log("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ GitHub");
    console.log("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev");
    console.log("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ Pull Request");

    console.log(
      "\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å AI –∞–≥–µ–Ω—Ç —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ PR –≤ –≤–∞—à–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!"
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", error.message);
  } finally {
    rl.close();
  }
}

setupGitHub();
