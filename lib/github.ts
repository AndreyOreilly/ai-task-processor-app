import { Octokit } from "@octokit/rest";

interface PullRequestData {
  taskDescription: string;
  analysis: string;
  generatedCode: string;
  fileName: string;
}

export class GitHubService {
  private octokit: Octokit;

  constructor() {
    const githubToken = process.env.GITHUB_TOKEN;
    const repoOwner = process.env.GITHUB_REPO_OWNER;
    const repoName = process.env.GITHUB_REPO_NAME;

    if (!githubToken || !repoOwner || !repoName) {
      throw new Error(
        "GitHub configuration is missing. Please set GITHUB_TOKEN, GITHUB_REPO_OWNER, and GITHUB_REPO_NAME environment variables."
      );
    }

    this.octokit = new Octokit({
      auth: githubToken,
    });
  }

  async createPullRequest(data: PullRequestData) {
    const { taskDescription, analysis, generatedCode, fileName } = data;

    const repoOwner = process.env.GITHUB_REPO_OWNER!;
    const repoName = process.env.GITHUB_REPO_NAME!;
    const branchName = `feature/ai-generated-${fileName.replace(".py", "")}`;
    const baseBranch = "main";

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
      const baseRef = await this.octokit.git.getRef({
        owner: repoOwner,
        repo: repoName,
        ref: `heads/${baseBranch}`,
      });

      await this.octokit.git.createRef({
        owner: repoOwner,
        repo: repoName,
        ref: `refs/heads/${branchName}`,
        sha: baseRef.data.object.sha,
      });

      // 2. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º
      const fileContent = this.createFileContent(
        taskDescription,
        analysis,
        generatedCode
      );

      await this.octokit.repos.createOrUpdateFileContents({
        owner: repoOwner,
        repo: repoName,
        path: `generated/${fileName}`,
        message: `feat: AI-generated code for task - ${taskDescription.slice(
          0,
          50
        )}...`,
        content: Buffer.from(fileContent).toString("base64"),
        branch: branchName,
      });

      // 3. –°–æ–∑–¥–∞–µ–º README —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
      const readmeContent = this.createReadmeContent(
        taskDescription,
        analysis,
        fileName
      );

      await this.octokit.repos.createOrUpdateFileContents({
        owner: repoOwner,
        repo: repoName,
        path: `generated/${fileName.replace(".py", ".md")}`,
        message: `docs: Add README for ${fileName}`,
        content: Buffer.from(readmeContent).toString("base64"),
        branch: branchName,
      });

      // 4. –°–æ–∑–¥–∞–µ–º Pull Request
      const pr = await this.octokit.pulls.create({
        owner: repoOwner,
        repo: repoName,
        title: `ü§ñ AI Generated: ${taskDescription.slice(0, 60)}...`,
        body: this.createPullRequestBody(taskDescription, analysis, fileName),
        head: branchName,
        base: baseBranch,
      });

      return {
        title: pr.data.title,
        description: pr.data.body,
        url: pr.data.html_url,
        branch: branchName,
        number: pr.data.number,
      };
    } catch (error) {
      console.error("Error creating pull request:", error);
      throw new Error("Failed to create pull request");
    }
  }

  private createFileContent(
    taskDescription: string,
    analysis: string,
    generatedCode: string
  ): string {
    return `"""
AI Generated Code
================

Task Description: ${taskDescription}

Analysis:
${analysis}

Generated on: ${new Date().toISOString()}
"""

${generatedCode}
`;
  }

  private createReadmeContent(
    taskDescription: string,
    analysis: string,
    fileName: string
  ): string {
    return `# AI Generated Code: ${fileName}

## Task Description
${taskDescription}

## Analysis
${analysis}

## Generated Code
The generated code is available in \`${fileName}\`.

## Usage
\`\`\`bash
python ${fileName}
\`\`\`

## Dependencies
Check the comments at the top of the file for required dependencies.

---
*This code was automatically generated by AI Task Processor using GigaChat API.*
`;
  }

  private createPullRequestBody(
    taskDescription: string,
    analysis: string,
    fileName: string
  ): string {
    return `## ü§ñ AI Generated Pull Request

### Task Description
${taskDescription}

### Analysis
${analysis}

### Generated Files
- \`generated/${fileName}\` - Main implementation
- \`generated/${fileName.replace(".py", ".md")}\` - Documentation

### What was done
- ‚úÖ Analyzed the technical requirement
- ‚úÖ Generated working Python code
- ‚úÖ Added error handling and documentation
- ‚úÖ Created comprehensive README

### Next Steps
- [ ] Review the generated code
- [ ] Test the implementation
- [ ] Add any necessary modifications
- [ ] Merge if approved

---
*This PR was automatically created by AI Task Processor.*
`;
  }
}
