#!/usr/bin/env node

const { Octokit } = require("@octokit/rest");
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
function loadEnv() {
  try {
    const envContent = fs.readFileSync('.env.local', 'utf8');
    const envVars = {};
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts.join('=').trim();
      }
    });
    return envVars;
  } catch (error) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.local");
    return {};
  }
}

const env = loadEnv();

async function enablePages() {
  const token = env.GITHUB_TOKEN;
  if (!token) {
    console.error("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local");
    return;
  }

  const octokit = new Octokit({ auth: token });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const { data: user } = await octokit.users.getAuthenticated();
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.login}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    const { data: repos } = await octokit.repos.listForAuthenticatedUser({
      type: "owner",
      sort: "updated",
      per_page: 10,
    });

    console.log("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:");
    repos.forEach((repo, index) => {
      console.log(
        `${index + 1}. ${repo.full_name} (${
          repo.private ? "private" : "public"
        })`
      );
    });

    // –ü—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å Pages –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    for (const repo of repos) {
      try {
        console.log(`\nüîß –í–∫–ª—é—á–∞–µ–º Pages –¥–ª—è ${repo.full_name}...`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Pages
        try {
          const { data: pages } = await octokit.repos.getPages({
            owner: repo.owner.login,
            repo: repo.name,
          });
          console.log(`   ‚úÖ Pages —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã: ${pages.url}`);
        } catch (error) {
          if (error.status === 404) {
            // Pages –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã, –≤–∫–ª—é—á–∞–µ–º
            await octokit.repos.createPagesSite({
              owner: repo.owner.login,
              repo: repo.name,
              source: {
                branch: "main",
                path: "/",
              },
            });
            console.log(`   ‚úÖ Pages –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${repo.full_name}`);
          } else {
            console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Pages: ${error.message}`);
          }
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${repo.full_name}: ${error.message}`);
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

enablePages();
